=== admin.js ===
const express = require('express');
const router = express.Router();
const adminController = require('../controllers/adminController');
const { isAuthenticated, isAdmin } = require('../middleware/auth');

// Apply middleware for all admin routes
router.use(isAuthenticated, isAdmin);

// GET admin dashboard
router.get('/dashboard', adminController.getDashboard);

// GET all courses
router.get('/courses', adminController.getCourses);

// GET course form (new or edit)
router.get('/courses/new', adminController.getCourseForm);
router.get('/courses/:id/edit', adminController.getCourseForm);

// POST create course
router.post('/courses', adminController.createCourse);

// POST update course
router.post('/courses/:id', adminController.updateCourse);

// DELETE course
router.delete('/courses/:id', adminController.deleteCourse);

// GET all students
router.get('/students', adminController.getStudents);

// GET student details
router.get('/students/:id', adminController.getStudentDetails);

// POST force enroll student in course
router.post('/students/:studentId/enroll/:courseId', adminController.forceEnrollStudent);

// POST remove student from course
router.post('/students/:studentId/remove/:courseId', adminController.removeStudentFromCourse);

// GET reports
router.get('/reports', adminController.getReports);

module.exports = router; 

=== api.js ===
const express = require('express');
const router = express.Router();
const Course = require('../models/Course');
const notificationController = require('../controllers/notificationController');
const { isAuthenticated } = require('../middleware/auth');

// Apply middleware for all API routes
router.use(isAuthenticated);

// GET course seats information
router.get('/courses/seats', async (req, res) => {
  try {
    const courses = await Course.find().select('_id courseCode availableSeats totalSeats');
    res.json(courses);
  } catch (error) {
    console.error('Error fetching courses seats:', error);
    res.status(500).json({ 
      success: false, 
      message: 'Error fetching courses' 
    });
  }
});

// GET specific course information
router.get('/courses/:id', async (req, res) => {
  try {
    const course = await Course.findById(req.params.id)
      .populate('prerequisites');
    
    if (!course) {
      return res.status(404).json({ 
        success: false, 
        message: 'Course not found' 
      });
    }
    
    res.json({
      success: true,
      course
    });
  } catch (error) {
    console.error('Error fetching course details:', error);
    res.status(500).json({ 
      success: false, 
      message: 'Error fetching course details' 
    });
  }
});

// POST trigger notifications (admin only)
router.post('/notifications/trigger', isAuthenticated, (req, res, next) => {
  if (req.session.user.role !== 'admin') {
    return res.status(403).json({ 
      success: false, 
      message: 'Unauthorized' 
    });
  }
  next();
}, notificationController.triggerNotifications);

module.exports = router; 

=== auth.js ===
const express = require('express');
const router = express.Router();
const authController = require('../controllers/authController');
const { isNotAuthenticated } = require('../middleware/auth');

// GET login page
router.get('/login', isNotAuthenticated, authController.getLoginPage);

// POST login
router.post('/login', isNotAuthenticated, authController.login);

// GET logout
router.get('/logout', authController.logout);

// GET error page
router.get('/error', authController.getErrorPage);

// Redirect root to login
router.get('/', (req, res) => {
  res.redirect('/login');
});

module.exports = router; 

=== student.js ===
const express = require('express');
const router = express.Router();
const studentController = require('../controllers/studentController');
const { isAuthenticated, isStudent } = require('../middleware/auth');

// Apply middleware for all student routes
router.use(isAuthenticated, isStudent);

// GET student dashboard
router.get('/dashboard', studentController.getDashboard);

// GET course catalog
router.get('/courses', studentController.getCourseCatalog);

// GET weekly schedule
router.get('/schedule', studentController.getWeeklySchedule);

// POST enroll in course
router.post('/enroll/:courseId', studentController.enrollInCourse);

// POST drop course
router.post('/drop/:courseId', studentController.dropCourse);

// POST subscribe to course notifications
router.post('/subscribe/:courseId', studentController.subscribeToCourse);

// POST unsubscribe from course notifications
router.post('/unsubscribe/:courseId', studentController.unsubscribeFromCourse);

module.exports = router; 

