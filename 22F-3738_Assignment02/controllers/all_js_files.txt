=== adminController.js ===
const User = require('../models/User');
const Course = require('../models/Course');
const Subscription = require('../models/Subscription');
const mongoose = require('mongoose');

/**
 * Get admin dashboard
 */
const getDashboard = async (req, res) => {
  try {
    // Get counts
    const coursesCount = await Course.countDocuments();
    const studentsCount = await User.countDocuments({ role: 'student' });
    
    // Get courses with available seats < 5
    const lowAvailabilityCoursesCount = await Course.countDocuments({ availableSeats: { $lt: 5 } });
    
    // Get recent courses
    const recentCourses = await Course.find()
      .sort({ createdAt: -1 })
      .limit(5);
    
    res.render('admin/dashboard', {
      coursesCount,
      studentsCount,
      lowAvailabilityCoursesCount,
      recentCourses
    });
  } catch (error) {
    console.error('Error fetching admin dashboard:', error);
    res.status(500).render('auth/error', { 
      message: 'Error loading dashboard. Please try again.' 
    });
  }
};

/**
 * Get all courses
 */
const getCourses = async (req, res) => {
  try {
    const courses = await Course.find()
      .populate('prerequisites')
      .sort({ department: 1, courseCode: 1 });
    
    res.render('admin/courses', { courses });
  } catch (error) {
    console.error('Error fetching courses:', error);
    res.status(500).render('auth/error', { 
      message: 'Error loading courses. Please try again.' 
    });
  }
};

/**
 * Get course form for creating/editing
 */
const getCourseForm = async (req, res) => {
  try {
    const { id } = req.params;
    let course = null;
    
    // Get all courses for prerequisites selection
    const allCourses = await Course.find().select('courseCode title');
    
    if (id) {
      // Edit existing course
      course = await Course.findById(id).populate('prerequisites');
      if (!course) {
        return res.status(404).render('auth/error', { 
          message: 'Course not found' 
        });
      }
    }
    
    res.render('admin/course-form', { 
      course, 
      allCourses,
      action: course ? 'edit' : 'create'
    });
  } catch (error) {
    console.error('Error getting course form:', error);
    res.status(500).render('auth/error', { 
      message: 'Error loading course form. Please try again.' 
    });
  }
};

/**
 * Create a new course
 */
const createCourse = async (req, res) => {
  const session = await mongoose.startSession();
  session.startTransaction();
  
  try {
    const { 
      courseCode, 
      title, 
      department, 
      description, 
      courseLevel, 
      credits, 
      instructor, 
      totalSeats,
      schedule,
      prerequisites
    } = req.body;
    
    // Create new course
    const course = new Course({
      courseCode,
      title,
      department,
      description,
      courseLevel,
      credits,
      instructor,
      totalSeats,
      availableSeats: totalSeats,
      schedule: JSON.parse(schedule),
      prerequisites: prerequisites ? JSON.parse(prerequisites) : []
    });
    
    await course.save({ session });
    
    await session.commitTransaction();
    session.endSession();
    
    req.io.emit('newCourse', { courseId: course._id });
    
    res.redirect('/admin/courses');
  } catch (error) {
    await session.abortTransaction();
    session.endSession();
    console.error('Error creating course:', error);
    res.status(500).render('auth/error', { 
      message: 'Error creating course. Please try again.' 
    });
  }
};

/**
 * Update an existing course
 */
const updateCourse = async (req, res) => {
  const session = await mongoose.startSession();
  session.startTransaction();
  
  try {
    const { id } = req.params;
    const { 
      courseCode, 
      title, 
      department, 
      description, 
      courseLevel, 
      credits, 
      instructor, 
      totalSeats,
      availableSeats,
      schedule,
      prerequisites
    } = req.body;
    
    // Find existing course
    const course = await Course.findById(id).session(session);
    
    if (!course) {
      await session.abortTransaction();
      session.endSession();
      return res.status(404).render('auth/error', { 
        message: 'Course not found' 
      });
    }
    
    // Check if seats are reduced and there are enrolled students
    const oldAvailableSeats = course.availableSeats;
    const newAvailableSeats = parseInt(availableSeats);
    
    // Update course fields
    course.courseCode = courseCode;
    course.title = title;
    course.department = department;
    course.description = description;
    course.courseLevel = courseLevel;
    course.credits = credits;
    course.instructor = instructor;
    course.totalSeats = totalSeats;
    course.availableSeats = newAvailableSeats;
    course.schedule = JSON.parse(schedule);
    course.prerequisites = prerequisites ? JSON.parse(prerequisites) : [];
    
    await course.save({ session });
    
    // If available seats increased, notify waitlisted students
    if (newAvailableSeats > oldAvailableSeats) {
      await checkWaitlistAndNotify(id, session);
    }
    
    await session.commitTransaction();
    session.endSession();
    
    // Notify clients about the update
    req.io.emit('courseUpdated', {
      courseId: course._id,
      availableSeats: course.availableSeats
    });
    
    res.redirect('/admin/courses');
  } catch (error) {
    await session.abortTransaction();
    session.endSession();
    console.error('Error updating course:', error);
    res.status(500).render('auth/error', { 
      message: 'Error updating course. Please try again.' 
    });
  }
};

/**
 * Delete a course
 */
const deleteCourse = async (req, res) => {
  const session = await mongoose.startSession();
  session.startTransaction();
  
  try {
    const { id } = req.params;
    
    // Find course
    const course = await Course.findById(id).populate('enrolledStudents').session(session);
    
    if (!course) {
      await session.abortTransaction();
      session.endSession();
      return res.status(404).json({ 
        success: false, 
        message: 'Course not found' 
      });
    }
    
    // Check if students are enrolled
    if (course.enrolledStudents.length > 0) {
      await session.abortTransaction();
      session.endSession();
      return res.status(400).json({ 
        success: false, 
        message: 'Cannot delete course with enrolled students' 
      });
    }
    
    // Delete all subscriptions for this course
    await Subscription.deleteMany({ course: id }).session(session);
    
    // Delete course
    await course.deleteOne({ session });
    
    await session.commitTransaction();
    session.endSession();
    
    req.io.emit('courseDeleted', { courseId: id });
    
    return res.status(200).json({ 
      success: true,
      message: 'Course deleted successfully'
    });
  } catch (error) {
    await session.abortTransaction();
    session.endSession();
    console.error('Error deleting course:', error);
    return res.status(500).json({ 
      success: false, 
      message: 'An error occurred while deleting the course' 
    });
  }
};

/**
 * Get all students
 */
const getStudents = async (req, res) => {
  try {
    const students = await User.find({ role: 'student' })
      .populate('enrolledCourses')
      .sort({ fullName: 1 });
    
    res.render('admin/students', { students });
  } catch (error) {
    console.error('Error fetching students:', error);
    res.status(500).render('auth/error', { 
      message: 'Error loading students. Please try again.' 
    });
  }
};

/**
 * Get student details
 */
const getStudentDetails = async (req, res) => {
  try {
    const { id } = req.params;
    
    const student = await User.findById(id)
      .populate('enrolledCourses');
    
    if (!student) {
      return res.status(404).render('auth/error', { 
        message: 'Student not found' 
      });
    }
    
    // Get all courses for enrollment management
    const allCourses = await Course.find().sort({ department: 1, courseCode: 1 });
    
    res.render('admin/student-details', { 
      student,
      allCourses
    });
  } catch (error) {
    console.error('Error fetching student details:', error);
    res.status(500).render('auth/error', { 
      message: 'Error loading student details. Please try again.' 
    });
  }
};

/**
 * Force enroll student in course
 */
const forceEnrollStudent = async (req, res) => {
  const session = await mongoose.startSession();
  session.startTransaction();
  
  try {
    const { studentId, courseId } = req.params;
    
    // Find student
    const student = await User.findById(studentId).session(session);
    
    if (!student) {
      await session.abortTransaction();
      session.endSession();
      return res.status(404).json({ 
        success: false, 
        message: 'Student not found' 
      });
    }
    
    // Find course
    const course = await Course.findById(courseId).session(session);
    
    if (!course) {
      await session.abortTransaction();
      session.endSession();
      return res.status(404).json({ 
        success: false, 
        message: 'Course not found' 
      });
    }
    
    // Check if student is already enrolled
    if (student.enrolledCourses.includes(courseId)) {
      await session.abortTransaction();
      session.endSession();
      return res.status(400).json({ 
        success: false, 
        message: 'Student is already enrolled in this course' 
      });
    }
    
    // Add course to student and student to course
    student.enrolledCourses.push(courseId);
    course.enrolledStudents.push(studentId);
    
    // Handle seats availability
    if (course.availableSeats > 0) {
      course.availableSeats -= 1;
    }
    
    await student.save({ session });
    await course.save({ session });
    
    await session.commitTransaction();
    session.endSession();
    
    req.io.emit('courseUpdated', {
      courseId,
      availableSeats: course.availableSeats
    });
    
    return res.status(200).json({ 
      success: true, 
      message: 'Student successfully enrolled in course',
      availableSeats: course.availableSeats
    });
  } catch (error) {
    await session.abortTransaction();
    session.endSession();
    console.error('Error force enrolling student:', error);
    return res.status(500).json({ 
      success: false, 
      message: 'An error occurred while enrolling the student' 
    });
  }
};

/**
 * Remove student from course
 */
const removeStudentFromCourse = async (req, res) => {
  const session = await mongoose.startSession();
  session.startTransaction();
  
  try {
    const { studentId, courseId } = req.params;
    
    // Find student
    const student = await User.findById(studentId).session(session);
    
    if (!student) {
      await session.abortTransaction();
      session.endSession();
      return res.status(404).json({ 
        success: false, 
        message: 'Student not found' 
      });
    }
    
    // Find course
    const course = await Course.findById(courseId).session(session);
    
    if (!course) {
      await session.abortTransaction();
      session.endSession();
      return res.status(404).json({ 
        success: false, 
        message: 'Course not found' 
      });
    }
    
    // Check if student is enrolled
    if (!student.enrolledCourses.includes(courseId)) {
      await session.abortTransaction();
      session.endSession();
      return res.status(400).json({ 
        success: false, 
        message: 'Student is not enrolled in this course' 
      });
    }
    
    // Remove course from student
    student.enrolledCourses = student.enrolledCourses.filter(
      c => c.toString() !== courseId
    );
    
    // Remove student from course
    course.enrolledStudents = course.enrolledStudents.filter(
      s => s.toString() !== studentId
    );
    
    // Increase available seats
    course.availableSeats += 1;
    
    await student.save({ session });
    await course.save({ session });
    
    // Check waitlist for notifications
    await checkWaitlistAndNotify(courseId, session);
    
    await session.commitTransaction();
    session.endSession();
    
    req.io.emit('courseUpdated', {
      courseId,
      availableSeats: course.availableSeats
    });
    
    return res.status(200).json({ 
      success: true, 
      message: 'Student successfully removed from course',
      availableSeats: course.availableSeats
    });
  } catch (error) {
    await session.abortTransaction();
    session.endSession();
    console.error('Error removing student from course:', error);
    return res.status(500).json({ 
      success: false, 
      message: 'An error occurred while removing the student' 
    });
  }
};

/**
 * Generate reports
 */
const getReports = async (req, res) => {
  try {
    // Get report type
    const { type } = req.query;
    
    let reportData = null;
    let reportTitle = '';
    
    if (type === 'enrollment') {
      // Enrollment report - courses with number of students
      reportData = await Course.aggregate([
        {
          $project: {
            courseCode: 1,
            title: 1,
            department: 1,
            totalSeats: 1,
            availableSeats: 1,
            enrolledCount: { $size: '$enrolledStudents' }
          }
        },
        { $sort: { department: 1, courseCode: 1 } }
      ]);
      reportTitle = 'Course Enrollment Report';
      
    } else if (type === 'available-seats') {
      // Available seats report - courses with open seats
      reportData = await Course.find({ availableSeats: { $gt: 0 } })
        .select('courseCode title department totalSeats availableSeats')
        .sort({ availableSeats: -1 });
      reportTitle = 'Available Seats Report';
      
    } else if (type === 'prerequisite') {
      // Missing prerequisites report
      // This is complex and would require checking each student against prerequisites
      // For demo purposes, we'll just show a placeholder
      reportData = { message: 'Prerequisite report would be generated here' };
      reportTitle = 'Missing Prerequisites Report';
      
    } else {
      // Default to no report selected
      reportData = null;
      reportTitle = 'Select a Report Type';
    }
    
    res.render('admin/reports', { 
      reportType: type,
      reportTitle,
      reportData
    });
  } catch (error) {
    console.error('Error generating report:', error);
    res.status(500).render('auth/error', { 
      message: 'Error generating report. Please try again.' 
    });
  }
};

/**
 * Check waitlist and notify students
 */
const checkWaitlistAndNotify = async (courseId, session) => {
  try {
    // Find active subscriptions for this course
    const subscriptions = await Subscription.find({
      course: courseId,
      isActive: true,
      notificationSent: false
    }).session(session);
    
    if (subscriptions.length === 0) {
      return;
    }
    
    // Mark subscriptions as notified
    for (const subscription of subscriptions) {
      subscription.notificationSent = true;
      subscription.notificationSentAt = new Date();
      await subscription.save({ session });
    }
    
    // In a real app, we would send actual notifications here using Twilio
    // For this demo, we'll just log it
    console.log(`Admin action: Notification sent to ${subscriptions.length} students for course ${courseId}`);
  } catch (error) {
    console.error('Error in checkWaitlistAndNotify:', error);
  }
};

module.exports = {
  getDashboard,
  getCourses,
  getCourseForm,
  createCourse,
  updateCourse,
  deleteCourse,
  getStudents,
  getStudentDetails,
  forceEnrollStudent,
  removeStudentFromCourse,
  getReports
}; 

=== authController.js ===
const User = require('../models/User');

/**
 * Render login page
 */
const getLoginPage = (req, res) => {
  res.render('auth/login', { error: null });
};

/**
 * Handle user logout
 */
const logout = (req, res) => {
  req.session.destroy((err) => {
    if (err) {
      console.error('Logout error:', err);
    }
    res.redirect('/auth/login');
  });
};


/**
 * Handle user login
 */
const login = async (req, res) => {
  try {
    const { email, password } = req.body;
    
    // Check if user exists
    const user = await User.findOne({ email });

    if (!user) {
      return res.render('auth/login', { 
        error: 'Invalid email or password'
      });
    }

    // Check if password matches
    const isMatch = await user.matchPassword(password);

    if (!isMatch) {
      return res.render('auth/login', { 
        error: 'Invalid email or password'
      });
    }

    // Store user in session
    req.session.user = {
      id: user._id,
      email: user.email,
      role: user.role,
      fullName: user.fullName
    };

    // Redirect based on role
    if (user.role === 'admin') {
      return res.redirect('/admin/dashboard');
    } else {
      return res.redirect('/student/dashboard');
    }

  } catch (error) {
    console.error('Login error:', error);
    return res.render('auth/login', { 
      error: 'An error occurred during login. Please try again.'
    });
  }
};


/**
 * Render error page
 */
const getErrorPage = (req, res) => {
  const message = req.query.message || 'An error occurred';
  res.render('auth/error', { message });
};

module.exports = {
  getLoginPage,
  login,
  logout,
  getErrorPage
}; 

=== notificationController.js ===
const User = require('../models/User');
const Course = require('../models/Course');
const Subscription = require('../models/Subscription');
const twilio = require('twilio');

// Safely initialize Twilio client only if SID starts with "AC" and token is present
let twilioClient = null;
if (
  process.env.TWILIO_ACCOUNT_SID &&
  process.env.TWILIO_ACCOUNT_SID.startsWith('AC') &&
  process.env.TWILIO_AUTH_TOKEN
) {
  try {
    twilioClient = twilio(
      process.env.TWILIO_ACCOUNT_SID,
      process.env.TWILIO_AUTH_TOKEN
    );
  } catch (error) {
    console.error('Error initializing Twilio client:', error);
    twilioClient = null;
  }
}

/**
 * Send email notification (stub or Twilio SendGrid if configured)
 */
const sendEmailNotification = async (to, subject, message) => {
  try {
    if (!twilioClient) {
      console.log('Twilio not configured. Would have sent email to:', to);
      console.log('Subject:', subject);
      console.log('Message:', message);
      return;
    }

    // In a real implementation, we would use Twilio SendGrid to send email
    // For this demo, we'll just log it
    console.log(`Email notification sent to ${to}`);
    console.log('Subject:', subject);
    console.log('Message:', message);
  } catch (error) {
    console.error('Error sending email notification:', error);
  }
};

/**
 * Send SMS notification (stub or Twilio if configured)
 */
const sendSmsNotification = async (to, message) => {
  try {
    if (!twilioClient || !process.env.TWILIO_PHONE_NUMBER) {
      console.log('Twilio not configured. Would have sent SMS to:', to);
      console.log('Message:', message);
      return;
    }

    // In a real implementation, we would use Twilio to send SMS
    // For this demo, we'll just log it
    console.log(`SMS notification sent to ${to}`);
    console.log('Message:', message);

    // Uncomment in production with valid Twilio credentials
    /*
     *    await twilioClient.messages.create({
     *      body: message,
     *      from: process.env.TWILIO_PHONE_NUMBER,
     *      to: to
  });
  */
  } catch (error) {
    console.error('Error sending SMS notification:', error);
  }
};

/**
 * Process course seat availability notifications
 */
const processNotifications = async () => {
  try {
    // Find all pending notifications
    const pendingSubscriptions = await Subscription.find({
      isActive: true,
      notificationSent: false
    }).populate('student course');

    if (pendingSubscriptions.length === 0) {
      return;
    }

    console.log(`Processing ${pendingSubscriptions.length} pending notifications`);

    for (const subscription of pendingSubscriptions) {
      const { student, course, notificationType } = subscription;

      // Check if the course still has available seats
      const updatedCourse = await Course.findById(course._id);
      if (!updatedCourse || updatedCourse.availableSeats <= 0) {
        continue;
      }

      // Build notification message
      const message = `Good news! A seat has become available in ${course.courseCode}: ${course.title}. Log in to register now before it fills up.`;
      const subject = `Seat Available in ${course.courseCode}`;

      // Send notifications based on preference
      if (notificationType === 'email' || notificationType === 'both') {
        await sendEmailNotification(student.email, subject, message);
      }

      if (notificationType === 'sms' || notificationType === 'both') {
        if (student.phone) {
          await sendSmsNotification(student.phone, message);
        }
      }

      // Mark notification as sent
      subscription.notificationSent = true;
      subscription.notificationSentAt = new Date();
      await subscription.save();
    }
  } catch (error) {
    console.error('Error processing notifications:', error);
  }
};

/**
 * Manual trigger for notification processing (for testing)
 */
const triggerNotifications = async (req, res) => {
  try {
    await processNotifications();
    res.status(200).json({
      success: true,
      message: 'Notifications processed successfully'
    });
  } catch (error) {
    console.error('Error triggering notifications:', error);
    res.status(500).json({
      success: false,
      message: 'Error processing notifications'
    });
  }
};

// Export functions
module.exports = {
  sendEmailNotification,
  sendSmsNotification,
  processNotifications,
  triggerNotifications
};


=== studentController.js ===
const User = require('../models/User');
const Course = require('../models/Course');
const Subscription = require('../models/Subscription');
const mongoose = require('mongoose');

/**
 * Get student dashboard
 */
const getDashboard = async (req, res) => {
  try {
    const student = await User.findById(req.session.user.id)
      .populate('enrolledCourses');
    
    res.render('student/dashboard', {
      student,
      courses: student.enrolledCourses
    });
  } catch (error) {
    console.error('Error fetching student dashboard:', error);
    res.status(500).render('auth/error', { 
      message: 'Error loading dashboard. Please try again.' 
    });
  }
};

/**
 * Get course catalog
 */
const getCourseCatalog = async (req, res) => {
  try {
    // Get filter parameters
    const { department, courseLevel, day, timeOfDay } = req.query;
    
    // Build filter object
    const filter = {};
    
    if (department) {
      filter.department = department;
    }
    
    if (courseLevel) {
      filter.courseLevel = parseInt(courseLevel);
    }
    
    if (day) {
      filter['schedule.dayOfWeek'] = day;
    }
    
    // Get all courses matching filter
    const courses = await Course.find(filter)
      .populate('prerequisites');
    
    // Get departments for filter dropdown
    const departments = await Course.distinct('department');
    
    // Get current student with enrolled courses
    const student = await User.findById(req.session.user.id)
      .populate('enrolledCourses');
    
    // Get all student subscriptions
    const subscriptions = await Subscription.find({
      student: req.session.user.id
    }).select('course');
    
    const subscribedCourseIds = subscriptions.map(sub => sub.course.toString());
    
    res.render('student/course-catalog', {
      courses,
      departments,
      student,
      subscribedCourseIds,
      filters: req.query
    });
  } catch (error) {
    console.error('Error fetching course catalog:', error);
    res.status(500).render('auth/error', { 
      message: 'Error loading course catalog. Please try again.' 
    });
  }
};

/**
 * Enroll in a course
 */
const enrollInCourse = async (req, res) => {
  const session = await mongoose.startSession();
  session.startTransaction();
  
  try {
    const { courseId } = req.params;
    const studentId = req.session.user.id;
    
    // Find course and check if seats are available
    const course = await Course.findById(courseId).session(session);
    
    if (!course) {
      await session.abortTransaction();
      session.endSession();
      return res.status(404).json({ 
        success: false, 
        message: 'Course not found' 
      });
    }
    
    if (course.availableSeats < 1) {
      await session.abortTransaction();
      session.endSession();
      return res.status(400).json({ 
        success: false, 
        message: 'No seats available in this course' 
      });
    }
    
    // Find student
    const student = await User.findById(studentId)
      .populate('enrolledCourses')
      .session(session);
    
    if (!student) {
      await session.abortTransaction();
      session.endSession();
      return res.status(404).json({ 
        success: false, 
        message: 'Student not found' 
      });
    }
    
    // Check if student is already enrolled
    if (student.enrolledCourses.some(c => c._id.toString() === courseId)) {
      await session.abortTransaction();
      session.endSession();
      return res.status(400).json({ 
        success: false, 
        message: 'You are already enrolled in this course' 
      });
    }
    
    // Check for schedule conflicts
    const newCourseSchedule = course.schedule;
    
    for (const enrolledCourse of student.enrolledCourses) {
      for (const enrolledTimeSlot of enrolledCourse.schedule) {
        for (const newTimeSlot of newCourseSchedule) {
          if (enrolledTimeSlot.dayOfWeek === newTimeSlot.dayOfWeek) {
            // Convert time strings to Date objects for comparison
            const enrolledStart = new Date(`2000-01-01T${enrolledTimeSlot.startTime}`);
            const enrolledEnd = new Date(`2000-01-01T${enrolledTimeSlot.endTime}`);
            const newStart = new Date(`2000-01-01T${newTimeSlot.startTime}`);
            const newEnd = new Date(`2000-01-01T${newTimeSlot.endTime}`);
            
            // Check for overlap
            if ((newStart >= enrolledStart && newStart < enrolledEnd) || 
                (newEnd > enrolledStart && newEnd <= enrolledEnd) ||
                (newStart <= enrolledStart && newEnd >= enrolledEnd)) {
              await session.abortTransaction();
              session.endSession();
              return res.status(400).json({ 
                success: false, 
                message: `Schedule conflict with ${enrolledCourse.courseCode}: ${enrolledCourse.title}` 
              });
            }
          }
        }
      }
    }
    
    // Check prerequisites
    if (course.prerequisites && course.prerequisites.length > 0) {
      const studentCourseIds = student.enrolledCourses.map(c => c._id.toString());
      for (const prereq of course.prerequisites) {
        if (!studentCourseIds.includes(prereq.toString())) {
          // Get the prerequisite course details for the error message
          const prerequisiteCourse = await Course.findById(prereq).session(session);
          await session.abortTransaction();
          session.endSession();
          return res.status(400).json({ 
            success: false, 
            message: `Missing prerequisite: ${prerequisiteCourse.courseCode}: ${prerequisiteCourse.title}` 
          });
        }
      }
    }
    
    // All checks passed, enroll student
    course.availableSeats -= 1;
    course.enrolledStudents.push(studentId);
    student.enrolledCourses.push(courseId);
    
    await course.save({ session });
    await student.save({ session });
    
    // Remove any active subscription for this course
    await Subscription.findOneAndUpdate(
      { student: studentId, course: courseId, isActive: true },
      { isActive: false },
      { session }
    );
    
    await session.commitTransaction();
    session.endSession();
    
    // Notify other users about seat availability update
    req.io.emit('courseUpdated', {
      courseId,
      availableSeats: course.availableSeats
    });
    
    return res.status(200).json({ 
      success: true, 
      message: 'Successfully enrolled in course',
      availableSeats: course.availableSeats 
    });
  } catch (error) {
    await session.abortTransaction();
    session.endSession();
    console.error('Error enrolling in course:', error);
    return res.status(500).json({ 
      success: false, 
      message: 'An error occurred while enrolling in the course' 
    });
  }
};

/**
 * Drop a course
 */
const dropCourse = async (req, res) => {
  const session = await mongoose.startSession();
  session.startTransaction();
  
  try {
    const { courseId } = req.params;
    const studentId = req.session.user.id;
    
    // Find course
    const course = await Course.findById(courseId).session(session);
    
    if (!course) {
      await session.abortTransaction();
      session.endSession();
      return res.status(404).json({ 
        success: false, 
        message: 'Course not found' 
      });
    }
    
    // Find student
    const student = await User.findById(studentId).session(session);
    
    if (!student) {
      await session.abortTransaction();
      session.endSession();
      return res.status(404).json({ 
        success: false, 
        message: 'Student not found' 
      });
    }
    
    // Check if student is enrolled in the course
    if (!student.enrolledCourses.includes(courseId)) {
      await session.abortTransaction();
      session.endSession();
      return res.status(400).json({ 
        success: false, 
        message: 'You are not enrolled in this course' 
      });
    }
    
    // Remove course from student's enrolled courses
    student.enrolledCourses = student.enrolledCourses.filter(
      c => c.toString() !== courseId
    );
    
    // Remove student from course's enrolled students
    course.enrolledStudents = course.enrolledStudents.filter(
      s => s.toString() !== studentId
    );
    
    // Increase available seats
    course.availableSeats += 1;
    
    await student.save({ session });
    await course.save({ session });
    
    // Check for waiting students and notify them
    await checkWaitlistAndNotify(courseId, session);
    
    await session.commitTransaction();
    session.endSession();
    
    // Notify other users about seat availability update
    req.io.emit('courseUpdated', {
      courseId,
      availableSeats: course.availableSeats
    });
    
    return res.status(200).json({ 
      success: true, 
      message: 'Successfully dropped course',
      availableSeats: course.availableSeats
    });
  } catch (error) {
    await session.abortTransaction();
    session.endSession();
    console.error('Error dropping course:', error);
    return res.status(500).json({ 
      success: false, 
      message: 'An error occurred while dropping the course' 
    });
  }
};

/**
 * Get weekly schedule
 */
const getWeeklySchedule = async (req, res) => {
  try {
    const student = await User.findById(req.session.user.id)
      .populate('enrolledCourses');
    
    res.render('student/weekly-schedule', {
      student,
      courses: student.enrolledCourses
    });
  } catch (error) {
    console.error('Error fetching weekly schedule:', error);
    res.status(500).render('auth/error', { 
      message: 'Error loading weekly schedule. Please try again.' 
    });
  }
};

/**
 * Subscribe to course notification
 */
const subscribeToCourse = async (req, res) => {
  try {
    const { courseId } = req.params;
    const studentId = req.session.user.id;
    const { notificationType } = req.body;
    
    // Find student
    const student = await User.findById(studentId);
    
    if (!student) {
      return res.status(404).json({ 
        success: false, 
        message: 'Student not found' 
      });
    }
    
    // Find course
    const course = await Course.findById(courseId);
    
    if (!course) {
      return res.status(404).json({ 
        success: false, 
        message: 'Course not found' 
      });
    }
    
    // Check if student is already subscribed
    const existingSubscription = await Subscription.findOne({
      student: studentId,
      course: courseId,
      isActive: true
    });
    
    if (existingSubscription) {
      return res.status(400).json({ 
        success: false, 
        message: 'You are already subscribed to this course' 
      });
    }
    
    // Create new subscription
    const subscription = new Subscription({
      student: studentId,
      course: courseId,
      notificationEmail: student.email,
      notificationPhone: student.phone || '',
      notificationType: notificationType || 'email'
    });
    
    await subscription.save();
    
    return res.status(200).json({ 
      success: true, 
      message: 'Successfully subscribed to course notifications' 
    });
  } catch (error) {
    console.error('Error subscribing to course:', error);
    return res.status(500).json({ 
      success: false, 
      message: 'An error occurred while subscribing to the course' 
    });
  }
};

/**
 * Unsubscribe from course notification
 */
const unsubscribeFromCourse = async (req, res) => {
  try {
    const { courseId } = req.params;
    const studentId = req.session.user.id;
    
    // Find and update subscription
    const subscription = await Subscription.findOneAndUpdate(
      {
        student: studentId,
        course: courseId,
        isActive: true
      },
      {
        isActive: false
      },
      {
        new: true
      }
    );
    
    if (!subscription) {
      return res.status(404).json({ 
        success: false, 
        message: 'Subscription not found' 
      });
    }
    
    return res.status(200).json({ 
      success: true, 
      message: 'Successfully unsubscribed from course notifications' 
    });
  } catch (error) {
    console.error('Error unsubscribing from course:', error);
    return res.status(500).json({ 
      success: false, 
      message: 'An error occurred while unsubscribing from the course' 
    });
  }
};

/**
 * Check waitlist and notify students
 */
const checkWaitlistAndNotify = async (courseId, session) => {
  try {
    // Find active subscriptions for this course
    const subscriptions = await Subscription.find({
      course: courseId,
      isActive: true,
      notificationSent: false
    }).session(session);
    
    if (subscriptions.length === 0) {
      return;
    }
    
    // Mark subscriptions as notified
    for (const subscription of subscriptions) {
      subscription.notificationSent = true;
      subscription.notificationSentAt = new Date();
      await subscription.save({ session });
    }
    
    // In a real app, we would send actual notifications here using Twilio
    // For this example, we'll just log it
    console.log(`Notification sent to ${subscriptions.length} students for course ${courseId}`);
  } catch (error) {
    console.error('Error in checkWaitlistAndNotify:', error);
  }
};

module.exports = {
  getDashboard,
  getCourseCatalog,
  enrollInCourse,
  dropCourse,
  getWeeklySchedule,
  subscribeToCourse,
  unsubscribeFromCourse
}; 

